#!/usr/bin/env bash

BIN=sslocal
RC_FILE=~/.shadowsocksrc
SHELL_CMD="$BIN -c $RC_FILE"

NAME=shadowsocks
USER=root
GROUP=root
PID_DIR=/var/run
PID_FILE=$PID_DIR/shadowsocks.pid
LOG_FILE=/var/log/shadowsocks

LOCAL_PORT=1080

RET_VAL=0

check_running() {
    if [[ -r $PID_FILE ]]; then
        read PID <$PID_FILE
        if [[ -d "/proc/$PID" ]]; then
            return 0
        else
            rm -f $PID_FILE
            return 1
        fi
    else
        return 2
    fi
}

# do_status
do_st() {
    check_running
    case $? in
        0)
            echo "$NAME running with PID $PID"
            ;;
        1)
            echo "$NAME not running, remove PID file $PID_FILE"
            ;;
        2)
            echo "Could not find PID file $PID_FILE, $NAME does not appear to be running"
            ;;
    esac
    return 0
}

# do_start
do_on() {
    if [[ ! -d $PID_DIR ]]; then
        echo "creating PID dir"
        mkdir $PID_DIR || echo "failed creating PID directory $PID_DIR"; exit 1
        # chown $USER:$GROUP $PID_DIR || echo "failed creating PID directory $PID_DIR"; exit 1
        chmod 0770 $PID_DIR
    fi
    if check_running; then
        echo "$NAME already running with PID $PID"
        return 0
    fi
    echo "starting $NAME"
    # sudo will set the group to the primary group of $USER
    # sudo -u $USER -H $SHELL_CMD>$LOG_FILE 2>&1 &
    $SHELL_CMD>$LOG_FILE 2>&1 &
    PID=$!
    echo $PID > $PID_FILE
    sleep 0.3
    if ! check_running; then
        echo "start failed"
        return 1
    fi
    echo "$NAME running with PID $PID"
    return 0
}

# do_stop
do_off() {
    if check_running; then
        echo "stopping $NAME with PID $PID"
        kill $PID
        rm -f $PID_FILE
    else
        echo "Could not find PID file $PID_FILE"
    fi
}

# do_restart
do_re() {
    do_on
    do_off
}

# do_install
do_ins() {
    echo "[DOING] installing shadowsocks client..."
    pip install shadowsocks || echo "cannot install shadowsocks."
    yum install m2crypto || echo "cannot install m2crypto."
}

do_rc() {
    echo "[DOING] creating rc file..."
    read -sp "password: " password
    echo -e "\n"
    cat > $RC_FILE <<!EOF!
{
    "server":"107.170.234.24",
    "server_port":8388,
    "local_port":$LOCAL_PORT,
    "password":$password,
    "timeout":600,
    "method":"aes-256-cfb"
}
!EOF!
    echo "$RC_FILE: "
    cat $RC_FILE
}

do_log() {
    tail -f $LOG_FILE || echo "check the log file: $LOG_FILE"
}

do_proxy() {
    case $1 in
        on)
            export http_proxy="http://127.0.0.1:1080/"
            export https_proxy="http://127.0.0.1:1080/"
            echo $http_proxy
            ;;
        off)
            export http_proxy=
            export https_proxy=
            ;;
        *)
            do_usage
            ;;
    esac
}

do_usage() {
    cat <<!EOF!
usage: $NAME <command> [<option>]
command:
        st                  show the status of vpn.
        on                  starting the vpn.
        off                 stopping the vpn.
        re                  restart the vpn.
        ins                 install the vpn.
        rc                  set the rc file of vpn.
        log                 show the log of vpn.
        proxy               set the proxy.
            on|off

fq means go through the GFW.
!EOF!
    exit 1
}

case $1 in
    st | on | off | re | ins | rc | log | proxy)
        do_$1 $2
        ;;
    proxy)
                echo "[DOING] setting the proxy..."
                http_proxy="http://127.0.0.1:1080"
                export http_proxy
                exit 0
                ;;
    *)
        do_usage
        RET_VAL=1
        ;;
esac

exit $RET_VAL
