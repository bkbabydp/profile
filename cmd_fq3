#!/usr/bin/env bash

NAME=cow

BIN_PATH=~/profile/tools/$NAME
BIN=$BIN_PATH/cow
RC_FILE=$BIN_PATH/.cowrc
SHELL_CMD="$BIN -rc $RC_FILE"

USER=root
GROUP=root
PID_DIR=/var/run
PID_FILE=$PID_DIR/$NAME.pid
LOG_FILE=/var/log/$NAME

LOCAL_PORT=7777

RET_VAL=0

check_running() {
    if [[ -r $PID_FILE ]]; then
        read PID <$PID_FILE
        if [[ -d "/proc/$PID" ]]; then
            return 0
        else
            rm -f $PID_FILE
            return 1
        fi
    else
        return 2
    fi
}

# do_status
do_st() {
    check_running
    case $? in
        0)
            echo "$NAME running with PID $PID"
            ;;
        1)
            echo "$NAME not running, remove PID file $PID_FILE"
            ;;
        2)
            echo "Could not find PID file $PID_FILE, $NAME does not appear to be running"
            ;;
    esac
    return 0
}

# do_start
do_on() {
    if [[ ! -d $PID_DIR ]]; then
        echo "creating PID dir"
        mkdir $PID_DIR || echo "failed creating PID directory $PID_DIR"; exit 1
        # chown $USER:$GROUP $PID_DIR || echo "failed creating PID directory $PID_DIR"; exit 1
        chmod 0770 $PID_DIR
    fi
    if check_running; then
        echo "$NAME already running with PID $PID"
        return 0
    fi
    echo "starting $NAME"
    # sudo will set the group to the primary group of $USER
    # sudo -u $USER -H $SHELL_CMD>$LOG_FILE 2>&1 &
    $SHELL_CMD>$LOG_FILE 2>&1 &
    PID=$!
    echo $PID > $PID_FILE
    sleep 0.3
    if ! check_running; then
        echo "start failed"
        return 1
    fi
    echo "$NAME running with PID $PID"
    return 0
}

# do_stop
do_off() {
    if check_running; then
        echo "stopping $NAME with PID $PID"
        kill $PID
        rm -f $PID_FILE
    else
        echo "Could not find PID file $PID_FILE"
    fi
}

# do_restart
do_re() {
    do_on
    do_off
}

# do_install
do_ins() {
    echo "Installing $NAME..."
    local p=`pwd`
    mkdir -p $BIN_PATH
    cd $BIN_PATH
    curl -L git.io/cow | bash || echo "cannot install cow."; cd $p; exit 1
    cd $p
}

do_rc() {
    echo "creating rc file..."
    read -sp "password: " password
    echo -e "\n"
    cat > $RC_FILE <<!EOF!
#开头的行是注释，会被忽略
# 本地 HTTP 代理地址
# 配置 HTTP 和 HTTPS 代理时请填入该地址
# 或者在自动代理配置中填入 http://127.0.0.1:7777/pac
listen = http://127.0.0.1:$LOCAL_PORT

# SOCKS5 二级代理
# proxy = socks5://127.0.0.1:1080
# HTTP 二级代理
# proxy = http://127.0.0.1:8080
# proxy = http://user:password@127.0.0.1:8080
# shadowsocks 二级代理
proxy = ss://aes-256-cfb:$password@107.170.234.24:8388
# proxy = ss://aes-128-cfb:password@1.2.3.4:8388
# cow 二级代理
# proxy = cow://aes-128-cfb:password@1.2.3.4:8388
!EOF!
    echo "$RC_FILE: "
    cat $RC_FILE
}

do_log() {
    tail -f $LOG_FILE || echo "check the log file: $LOG_FILE"; exit 1
}

do_proxy() {
    case $1 in
        on)
            declare -x http_proxy="http://127.0.0.1:$LOCAL_PORT/pac"
            declare -x https_proxy="http://127.0.0.1:$LOCAL_PORT/pac"
            echo $http_proxy
            ;;
        off)
            declare -x http_proxy=
            declare -x https_proxy=
            ;;
        *)
            do_usage
            ;;
    esac
}

do_usage() {
    cat <<!EOF!
usage: $NAME <command> [<option>]
command:
        st                  show the status of vpn.
        on                  starting the vpn.
        off                 stopping the vpn.
        re                  restart the vpn.
        ins                 install the vpn.
        rc                  set the rc file of vpn.
        log                 show the log of vpn.
        proxy               set the proxy.
            on|off

fq means go through the GFW.
!EOF!
    exit 3
}

case $1 in
    st | on | off | re | ins | rc | log | proxy)
        do_$1 $2
        ;;
    *)
        do_usage
        RET_VAL=3
        ;;
esac

exit $RET_VAL
